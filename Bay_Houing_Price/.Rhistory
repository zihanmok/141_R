data=readRDS('housing.rds')
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
library(treemap)
library(tidyr)
library(maps)
data
glimpse(data)
#Q1
data<-tbl_df(data)
data$lsqft<-as.integer(data$lsqft)
#converting data types
data$date<-ymd(data$date)
data$price<-as.integer(data$price)
data$street<-as.character(data$street)
data$county<-as.factor(data$county)
data$zip<-as.factor(data$zip)
data$year<-as.integer(data$year)
summary(data$year)
#Iregularities: there are extremely large values in variable 'year'
#that doesn't make sense.
boxplot(data$year)
#Q2
#Because the U.S is founded in 1776 and we are in 2018, only the
#values between them are included
dat2<-subset(data, year >= 1776&year <= 2018)
range(dat2$year)
range(data$date)
#Q3
#mutate create 2 new variables
data<-mutate(data,yr=year(data$date),mon=month(data$date))
#avg_price over time
ggplot(data=data, aes(y=price,x=factor(mon),group=yr,color=factor(yr)))+
stat_summary(fun.y = "mean", geom = "line")+
xlab("Month")+ylab("Avg Housing Price")+labs(color="year")+
ggtitle("Avg Price Over Time")+theme_bw()
#sales over time
ggplot(data=data, aes(mon))+
scale_x_continuous(breaks=seq(1,12,1))+
geom_histogram(aes(fill=factor(yr)),binwidth = 0.5)+
#display count number
stat_bin(binwidth = 0.5, geom="text", colour="black", size = 3.5,
aes(label=..count.., group = yr), vjust = 1)+
ylab("Sales")+ggtitle("Sales Over Time")+
scale_fill_discrete(name="Year")#change legend title
#Q4
#correct the typo in county column
data$county<-sub("county","County",data$county)
data$county<-sub("San Franciscoe","San Francisco",data$county)
data$county<-sub("Alpine","San Francisco",data$county)
data$county<-as.factor(data$county)
dat4<-filter(data, year(date)%in%c("2005","2004","2003"))
dat4$br<-cut(as.numeric(dat4$br), breaks = c(0,1,2,3,28),
labels=c("1","2","3","4+"))
dat4$yr<-as.factor(year(dat4$date))
ggplot(data = na.omit(dat4), aes(y=price,x=yr,group=br,color = br))+
stat_summary(fun.y = "mean", geom = "line")+
facet_wrap(~county)+
theme_bw()+xlab("year")+ylab("avg_price")+
ggtitle("avg_price w.r.t year/br/county")+theme_classic()
#Q5
#extract pair_wise city and county then unique the table,
#then extract the city has more than 1 county
city_county_pair<-unique(data[,c("city","county")])
a<-table(city_county_pair)
a
city_county_pair
a
a[which(rowSums(a)>1),]
class(a)
rowSums(a)
rowSums(a)>1
which(rowSums(a)>1)
a[which(rowSums(a)>1),]
#Q6
dat6<-subset(data,price>0&bsqft<10000)
model1<-lm(dat6$price~dat6$bsqft)
summary(model1)
par(mfrow=c(1,3))
plot(dat6$bsqft, dat6$price)
abline(model1)
plot(model1,which=1)
plot(model1,which=4)
#boxcox trans
bc<-boxcox(dat6$price~dat6$bsqft)
arrange(tbl_df(bc),desc(y))
model2<-lm(dat6$price^(-0.061)~dat6$bsqft)
summary(model2)
par(mfrow=c(1,2))
plot(model2,which=1)
plot(model2,which=4)
#Q7 t test
#conduct t test with alpha = 0.01
model3<-lm(data$price~data$bsqft+data$lsqft)
model3_est<-coef(summary(model3))[,1]
model3_se<-coef(summary(model3))[,2]
t_star<-(model3_est[2]-model3_est[3])/(model3_se[2])
critical_val<-qt(0.90,19997)
t_star>=critical_val
#Q8 fit differet linear regression model based on different county
plot(1, type="n", xlab="bsqft", ylab="price",
xlim=range(data$bsqft,na.rm = TRUE),
ylim=range(data$price,na.rm = TRUE),
main="regression models")
split_county<-split(data,data$county)
models<-lapply(split_county,function(x)lm(price~bsqft,x))
# x represent the dataset in lapply.
regression_lines<-sapply(1:9, function(i) abline(coef(models[[i]]), col=i))
legend("bottomright",names(table(data$county)),
col=1:9,lty=rep(1,9),cex = 0.72)
split_county
View(split_county)
split_county$`Alameda County`
#Q9
sales<-aggregate(price~city+county,data,length)
sales
colnames(sales)[3]<-"sales"
colnames(avg_price)[3]<-"avg_price"
#merge two dataset with key "city" and "county"
price_sales<-merge(sales,avg_price,by=c("city","county"))
#merge two dataset with key "city" and "county"
price_sales<-merge(sales,avg_price,by=c("city","county"))
colnames(avg_price)[3]<-"avg_price"
#Q9
sales<-aggregate(price~city+county,data,length)
avg_price<-aggregate(price~city+county,data,mean)
colnames(sales)[3]<-"sales"
colnames(avg_price)[3]<-"avg_price"
#merge two dataset with key "city" and "county"
price_sales<-merge(sales,avg_price,by=c("city","county"))
price_sales<-price_sales%>%
group_by(county)%>%
top_n(n=3L,wt=sales)
treemap(price_sales,
index = c("county","city"),
vColor="avg_price",
vSize ="sales" ,
type="value",
title='top3 sales with avg_price in differetn county',
align.labels=list(c("left","top"),
c("center","center")),
format.legend = list(scientific = FALSE, big.mark = " "))
price_sales
#merge two dataset with key "city" and "county"
price_sales<-merge(sales,avg_price,by=c("city","county"))
price_sales
dim(price_sales)
#merge two dataset with key "city" and "county"
price_sales<-merge(sales,avg_price,by=c("city","county"))
dim(price_sales)
price_sales<-price_sales%>%
group_by(county)%>%
top_n(n=3L,wt=sales)
dim(price_sales)
#Q10
SFdata<-subset(data,data$city=="San Francisco")
SFdata$long2<-round(SFdata$long,2)
SFdata$lat2<-round(SFdata$lat,2)
#factorize the long,lat ranges,form cells.
long2_range<-range(SFdata$long2,na.rm=TRUE)
long_seq<-seq(long2_range[1],long2_range[2],.01)
long_seq
SFdata$longF<-factor(SFdata$long2,levels=long_seq)
lat2_range<-range(SFdata$lat2,na.rm = T)
lat_seq<-seq(lat2_range[1],lat2_range[2],.01)
SFdata$latF<-factor(SFdata$lat2,levels=lat_seq)
SF_agg<-aggregate(price~latF+longF,SFdata,
function(x)c(mean(x),length(x)),drop=FALSE)
SFhouse_prices<-matrix(SF_agg$price[,1],
nlevels(SFdata$longF),
nlevels(SFdata$latF),byrow=TRUE)
SFhouse_prices[SFhouse_prices==0]<-NA
SFhouse_sales<-matrix(SF_agg$price[,2],
nlevels(SFdata$longF),
nlevels(SFdata$latF),byrow=TRUE)
SFhouse_sales[SFhouse_sales==0]<-NA
#
sf_border=map('county','california,san francisco',plot = F)
image(x=long_seq,y=lat_seq,z=SFhouse_prices,xlim=c(-122.56,-122.3),
ylim = c(37.7,37.82),
xlab = "Longitude", ylab = "Latitude",
main = "SF Heatmap of Average Housing Prices")
lines(sf_border$x,sf_border$y)
image(x=long_seq,y=lat_seq,z=SFhouse_sales,xlim=c(-122.56,-122.3),
ylim = c(37.7,37.82),
xlab = "Longitude", ylab = "Latitude",
main = "SF Heatmap of Housing Sales")
lines(sf_border$x,sf_border$y)
SFdata$longF
SFdata$latF
SFdata
SF_agg<-aggregate(price~latF+longF,SFdata,
function(x)c(mean(x),length(x)),drop=FALSE)
SF_agg
SFhouse_prices
SFhouse_prices[SFhouse_prices==0]<-NA
SFhouse_prices
SFhouse_sales<-matrix(SF_agg$price[,2],
nlevels(SFdata$longF),
nlevels(SFdata$latF),byrow=TRUE)
SFhouse_sales[SFhouse_sales==0]<-NA
#
sf_border=map('county','california,san francisco',plot = F)
#
sf_border=map('county','california,san francisco',plot = F)
image(x=long_seq,y=lat_seq,z=SFhouse_prices,xlim=c(-122.56,-122.3),
ylim = c(37.7,37.82),
xlab = "Longitude", ylab = "Latitude",
main = "SF Heatmap of Average Housing Prices")
lines(sf_border$x,sf_border$y)
image(x=long_seq,y=lat_seq,z=SFhouse_sales,xlim=c(-122.56,-122.3),
ylim = c(37.7,37.82),
xlab = "Longitude", ylab = "Latitude",
main = "SF Heatmap of Housing Sales")
lines(sf_border$x,sf_border$y)
data=readRDS('housing.rds')
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
library(treemap)
library(tidyr)
```{r echo=FALSE}
data<-readRDS('housing.rds')
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
library(maps)
library(treemap)
data<-mutate(data,yr=year(data$date),mon=month(data$date))
ggplot(data=data, aes(y=price,x=mon,group=yr,color=yr))+
stat_summary(fun.y = "mean", geom = "line")+
xlab("month")+ylab("avg_housing_price")+labs(color="year")+
ggtitle("avg_price over time")+theme_classic()
ggplot(data=data, aes(as.numeric(mon)))+
geom_freqpoly(bins=10000)+scale_x_continuous(breaks=seq(0,12,1))+
facet_wrap(~yr)+xlab("month")+ylab("sales")+
ggtitle("sales over time")+theme_classic()
library(ggplot2)
shuffle<-function(){
x<-1:16
sample(x,length(x))
}
cards_arrange<-function(x){
x<-c(x[-1],x[1])
return(x)
}
simulate_monopoly<-function(n,d){
CC_position<-c(2,17,33)
CC_instruction<-c(0,10)
CH_position<-c(7,22,36)
CH_instruction1<-c(0,10,11,24,39,5)
CH_instruction2<-NA
CH_instruction2[CH_position]<-c(15,25,5)
CH_instruction3<-NA
CH_instruction3[CH_position]<-c(12,28,12)
CC_cards<-shuffle()
CH_cards<-shuffle()
pos=0
result<-numeric()
result[1]<-0
dice1<-sample(d,n,replace = T)
dice2<-sample(d,n,replace = T)
roll = dice1+dice2
double=dice1==dice2
counter=0
for (i in 1:n){
pos= pos + roll[i]
if(pos>39){
pos=pos%%40
}
if(double[i]==T){
counter=counter+1
}else{
counter=0
}
if(i>2&counter==3){
pos=10
counter=0
}else{
counter=counter
}
if(pos %in% CC_position){
CC_card=CC_cards[1]
CC_cards=cards_arrange(CC_cards)
if (CC_card == 1 | CC_card == 2){
pos=CC_instruction[CC_card]
}else{
pos=pos
}
}
if(pos %in% CH_position){
CH_card=CH_cards[1]
CH_cards=cards_arrange(CH_cards)
if(CH_card %in% c(1:6)){
pos=CH_instruction1[CH_card]
}else if(CH_card == 7|CH_card==8){
pos=CH_instruction2[pos]
}else if(CH_card==9){
pos=CH_instruction3[pos]
}else if(CH_card == 10){
pos=pos-3
if (pos == 33){
CC_card=CC_cards[1]
if(CC_card==1|CC_card==2){
pos=CC_instruction[CC_card]
}else{
pos=pos
}
}
}
}
if(pos == 30){
pos=10
}
result[i+1]<-pos
}
return(factor(result,0:39))
}
estimate_monopoly<-function(n,d){
prob<-sort(prop.table(table(simulate_monopoly(n,d))),decreasing = T)
return(prob)
}
dice3<-estimate_monopoly(10000,3)
dice4<-estimate_monopoly(10000,4)
dice5<-estimate_monopoly(10000,5)
dice6<-estimate_monopoly(10000,6)
dices<-c(dice3,dice4,dice5,dice6)
dice3<-data.frame(dice3)
dice4<-data.frame(dice4)
dice5<-data.frame(dice5)
dice6<-data.frame(dice6)
dice3$dice<-3
dice4$dice<-4
dice5$dice<-5
dice6$dice<-6
prob<-rbind(dice3,dice4,dice5,dice6)
colnames(prob)[1]<-'pos'
prob$dice<-as.factor(prob$dice)
ggplot(prob,aes(x=pos,y=Freq,color=dice))+
geom_line(aes(group=dice))+ylab("probability")+
ggtitle("Long-term probabilities on each pos")+
theme_classic()
simulate_monopoly2<-function(n,d,p,r){
CC_position<-c(2,17,33)
CC_instruction<-c(0,10)
CH_position<-c(7,22,36)
CH_instruction1<-c(0,10,11,24,39,5)
CH_instruction2<-NA
CH_instruction2[CH_position]<-c(15,25,5)
CH_instruction3<-NA
CH_instruction3[CH_position]<-c(12,28,12)
p_instruction<-NA
p_instruction[p]<-r
CC_cards<-shuffle()
CH_cards<-shuffle()
pos = 0
result<-numeric()
wealth<-numeric()
result[1]<-0
wealth[1]<-0
dice1<-sample(d,n,replace = T)
dice2<-sample(d,n,replace = T)
roll = dice1+dice2
double=dice1==dice2
counter=0
for (i in 1:n){
money = 0
Go = F
Jail = F
pos= pos + roll[i]
if(pos>39){
Go=T
pos=pos%%40
}
if(double[i]==T){
counter=counter+1
}else{
counter=0
}
if(i>2&counter==3){
pos=10
counter=0
}else{
counter=counter
}
if(pos %in% CC_position){
CC_card=CC_cards[1]
CC_cards=cards_arrange(CC_cards)
if (CC_card == 1 | CC_card == 2){
pos=CC_instruction[CC_card]
}else{
pos=pos
}
}
if(pos %in% CH_position){
CH_card=CH_cards[1]
CH_cards=cards_arrange(CH_cards)
if(CH_card %in% c(1:6)){
pos=CH_instruction1[CH_card]
}else if(CH_card == 7|CH_card==8){
pos=CH_instruction2[pos]
}else if(CH_card==9){
pos=CH_instruction3[pos]
}else if(CH_card == 10){
pos=pos-3
if (pos == 33){
CC_card=CC_cards[1]
if(CC_card==1|CC_card==2){
pos=CC_instruction[CC_card]
}else{
pos=pos
}
}
}
}
if(pos == 30){
pos=10
}
if(pos == 10){
Jail=T
}
if(pos==4){
money = money-200
}else if(pos==38){
money=money-100
}
if(pos%in%p){
money=money-p_instruction[pos]
}
if(Go==T&Jail==F){
money=money+200
}
result[i+1]<-pos
wealth[i+1]<-money
}
a<-cbind(result,wealth)
return(data.frame(a))
}
property<-read.csv('properties.csv')
data=readRDS('housing.rds')
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
library(treemap)
library(tidyr)
library(maps)
#Q1
data<-tbl_df(data)
data$county
data=readRDS('housing.rds')
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
library(treemap)
library(tidyr)
library(maps)
#Q1
data<-tbl_df(data)
glimpse(data)
